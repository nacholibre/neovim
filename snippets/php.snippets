## Symfony Snippets Nacholibre
snippet sfentitytype
	use Symfony\Bridge\Doctrine\Form\Type\EntityType;
snippet sftype
	use Symfony\Component\Form\Extension\Core\Type\${1:value}Type;
snippet sfdump
	\Doctrine\Common\Util\Debug::dump(${1:value});
snippet sfaction
	/**
	* @route("/test", name="test")
	*/
	public function testaction(request $request) {
		return $this->render('default/test.html.twig', [
		]);
	}
snippet sfformaction
	$form = $this->createForm(ExampleFormType::class, $entity, []);

	$form->handleRequest($request);

	if ($form->isValid()) {
		$em = $this->getDoctrine()->getManager();

		$product = $form->getData();

		$em->persist($product);
		$em->flush();

		return $this->redirectToRoute('route', []);
	}
snippet sfem
	$em = $this->getDoctrine()->getManager();
snippet sfrepo
	$em = $this->getDoctrine()->getManager();
	$repo = $em->getRepository('AppBundle:${1:value}');
snippet sfctrl
	use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
	use Symfony\Bundle\FrameworkBundle\Controller\Controller;

	class DefaultController extends Controller
	{
		/**
		* @route("/test", name="test")
		*/
		public function testaction(request $request) {
			return $this->render('default/test.html.twig', [
			]);
		}
	}
snippet sfentity
	<?php
	namespace AppBundle\Entity;

	use Doctrine\Common\Collections\ArrayCollection;
	use Doctrine\ORM\Mapping as ORM;
	use Symfony\Component\Validator\Constraints as Assert;
	use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

	/**
	* @ORM\Entity
	* @UniqueEntity(fields={"name"}, message="something here..")
	* @ORM\Table(name="table_name")
	*/
	class Entity {
		/**
		* @ORM\Column(type="integer")
		* @ORM\Id
		* @ORM\GeneratedValue(strategy="AUTO")
		*/
		protected $id;
	}
snippet sfdid
	/**
	* @ORM\Column(name="id", type="integer", nullable=false)
	* @ORM\Id()
	* @ORM\GeneratedValue(strategy="IDENTITY")
	*/
	private $id;
snippet sfdstring
	/**
	* @ORM\Column(name="", type="string", length=255)
	*/
	private $text;
snippet sfddecimal
	/**
	* @ORM\Column(name="", type="decimal", scale=2)
	*/
	private $;
snippet sfdtext
	/**
	* @ORM\Column(name="", type="text")
	*/
	private $;
snippet sfdint
	/**
	* @ORM\Column(name="", type="integer")
	*/
	private $;
snippet sfdbool
	/**
	* @ORM\Column(name="", type="boolean")
	*/
	private $;
snippet sfdsmallint
	/**
	* @ORM\Column(name="", type="smallint")
	*/
	private $;
snippet sfdbigint
	/**
	* @ORM\Column(name="", type="bigint")
	*/
	private $;
snippet sfddatetime
	/**
	* @ORM\Column(name="", type="datetime")
	*/
	private $;
snippet sfddate
	/**
	* @ORM\Column(name="", type="date")
	*/
	private $;
snippet sfdtime
	/**
	* @ORM\Column(name="", type="time")
	*/
	private $;
snippet sfdfloat
	/**
	* @ORM\Column(name="", type="float")
	*/
	private $;
snippet sfdarray
	/**
	* @ORM\Column(name="", type="array")
	*/
	private $;
snippet sfdobject
	/**
	* @ORM\Column(name="", type="object")
	*/
	private $;
snippet sfform
	use Symfony\Component\Form\AbstractType;
	use Symfony\Component\Form\FormBuilderInterface;
	use Symfony\Component\OptionsResolver\OptionsResolver;

	class NameType extends AbstractType {
		public function buildForm(FormBuilderInterface $builder, array $options) {
			$builder->add('field', 'text', [
				'label' => 'some',
			]);
		}

		public function configureOptions(OptionsResolver $resolver) {
			$resolver->setDefaults(array(
				'data_class' => '',
			));
		}

		public function getName() {
			return 'name';
		}
	}
##snippet php
##	<?php
##	${1}
##	?>
##snippet ec
##	echo "${1:string}"${2};
##snippet inc
##	include '${1:file}';${2}
##snippet inc1
##	include_once '${1:file}';${2}
##snippet req
##	require '${1:file}';${2}
##snippet req1
##	require_once '${1:file}';${2}
### $GLOBALS['...']
##snippet globals
##	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
##snippet $_ COOKIE['...']
##	$_COOKIE['${1:variable}']${2}
##snippet $_ ENV['...']
##	$_ENV['${1:variable}']${2}
##snippet $_ FILES['...']
##	$_FILES['${1:variable}']${2}
##snippet $_ Get['...']
##	$_GET['${1:variable}']${2}
##snippet $_ POST['...']
##	$_POST['${1:variable}']${2}
##snippet $_ REQUEST['...']
##	$_REQUEST['${1:variable}']${2}
##snippet $_ SERVER['...']
##	$_SERVER['${1:variable}']${2}
##snippet $_ SESSION['...']
##	$_SESSION['${1:variable}']${2}
### Start Docblock
##snippet /*
##	/**
##	 * ${1}
##	 **/
### Class - post doc
##snippet doc_cp
##	/**
##	 * ${1:undocumented class}
##	 *
##	 * @package ${2:default}
##	 * @author ${3:`g:snips_author`}
##	**/${4}
### Class Variable - post doc
##snippet doc_vp
##	/**
##	 * ${1:undocumented class variable}
##	 *
##	 * @var ${2:string}
##	 **/${3}
### Class Variable
##snippet doc_v
##	/**
##	 * ${3:undocumented class variable}
##	 *
##	 * @var ${4:string}
##	 **/
##	${1:var} $${2};${5}
### Class
##snippet doc_c
##	/**
##	 * ${3:undocumented class}
##	 *
##	 * @packaged ${4:default}
##	 * @author ${5:`g:snips_author`}
##	 **/
##	${1:}class ${2:}
##	{${6}
##	} // END $1class $2
### Constant Definition - post doc
##snippet doc_dp
##	/**
##	 * ${1:undocumented constant}
##	 **/${2}
### Constant Definition
##snippet doc_d
##	/**
##	 * ${3:undocumented constant}
##	 **/
##	define(${1}, ${2});${4}
### Function - post doc
##snippet doc_fp
##	/**
##	 * ${1:undocumented function}
##	 *
##	 * @return ${2:void}
##	 * @author ${3:`g:snips_author`}
##	 **/${4}
### Function signature
##snippet doc_s
##	/**
##	 * ${4:undocumented function}
##	 *
##	 * @return ${5:void}
##	 * @author ${6:`g:snips_author`}
##	 **/
##	${1}function ${2}(${3});${7}
### Function
##snippet doc_f
##	/**
##	 * ${4:undocumented function}
##	 *
##	 * @return ${5:void}
##	 * @author ${6:`g:snips_author`}
##	 **/
##	${1}function ${2}(${3})
##	{${7}
##	}
### Header
##snippet doc_h
##	/**
##	 * ${1}
##	 *
##	 * @author ${2:`g:snips_author`}
##	 * @version ${3:$Id$}
##	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
##	 * @package ${5:default}
##	 **/
##	
##	/**
##	 * Define DocBlock
##	 *//
### Interface
##snippet doc_i
##	/**
##	 * ${2:undocumented class}
##	 *
##	 * @package ${3:default}
##	 * @author ${4:`g:snips_author`}
##	 **/
##	interface ${1:}
##	{${5}
##	} // END interface $1
### class ...
##snippet class
##	/**
##	 * ${1}
##	 **/
##	class ${2:ClassName}
##	{
##		${3}
##		function ${4:__construct}(${5:argument})
##		{
##			${6:// code...}
##		}
##	}
### define(...)
##snippet def
##	define('${1}'${2});${3}
### defined(...)
##snippet def?
##	${1}defined('${2}')${3}
##snippet wh
##	while (${1:/* condition */}) {
##		${2:// code...}
##	}
### do ... while
##snippet do
##	do {
##		${2:// code... }
##	} while (${1:/* condition */});
##snippet if
##	if (${1:/* condition */}) {
##		${2:// code...}
##	}
##snippet ife
##	if (${1:/* condition */}) {
##		${2:// code...}
##	} else {
##		${3:// code...}
##	}
##	${4}
##snippet else
##	else {
##		${1:// code...}
##	}
##snippet elseif
##	elseif (${1:/* condition */}) {
##		${2:// code...}
##	}
### Tertiary conditional
##snippet t
##	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
##snippet switch
##	switch ($${1:variable}) {
##		case '${2:value}':
##			${3:// code...}
##			break;
##		${5}
##		default:
##			${4:// code...}
##			break;
##	}
##snippet case
##	case '${1:value}':
##		${2:// code...}
##		break;${3}
##snippet for
##	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
##		${4: // code...}
##	}
##snippet foreach
##	foreach ($${1:variable} as $${2:key}) {
##		${3:// code...}
##	}
##snippet fun
##	${1:public }function ${2:FunctionName}(${3})
##	{
##		${4:// code...}
##	}
### $... = array (...)
##snippet array
##	$${1:arrayName} = array('${2}' => ${3});${4}
